#!/usr/bin/env ruby

$:.push File.expand_path("../../lib", __FILE__)

require 'codes'
require 'commander'
require 'credentials_manager/appfile_config'
require 'fastlane_core'

HighLine.track_eof = false

class CodesApplication
  include Commander::Methods

  def run
    program :version, Codes::VERSION
    program :description, 'CLI for \'codes\' - Create promo codes for iOS Apps using the command line'
    program :help, 'Author', 'Felix Krause <codes@krausefx.com>'
    program :help, 'Website', 'https://fastlane.tools'
    program :help, 'GitHub', 'https://github.com/krausefx/codes'
    program :help_formatter, :compact

    always_trace!

    global_option '-u', '--username STRING', 'Your iTunes Connect username'
    global_option '-a', '--app_identifier STRING', 'The bundle ID to download promo codes for'
    global_option '-i', '--apple_id STRING', 'The App ID to download promo codes for'
    global_option '-o', '--output_file STRING', 'The name of the file that should be written to disk. If the file exists, the new codes will be appended.'
    global_option '-x', '--urls', 'If specified, includes a full URL for each code that can be used to redeem that code.'


    command :download do |c|
      c.syntax = "codes download [num]"
      c.description = "Download [num] new promo codes from iTunes Connect"

      c.action do |args, options|
          user = username options
          number_of_codes = count(args)
          apple_id = apple_id(options)
          app_identifier = bundle_id(options, apple_id)
          urls = options.x || options.urls

          Codes::CodesRunner.download(number_of_codes: number_of_codes, app_identifier: app_identifier, apple_id: apple_id, output_file_path: options.output_file, urls: urls)
      end
    end

    command :display do |c|
      c.syntax = "codes display"
      c.description = "Display remaining number of promo codes from iTunes Connect"

      c.action do |args, options|
          user = username options
          apple_id = apple_id(options)
          app_identifier = bundle_id(options, apple_id)

          Codes::CodesRunner.display(app_identifier: app_identifier, apple_id: apple_id, output_file_path: options.output_file)
      end
    end
    default_command :download

    def count(args)
      [args[0].to_i, 1].max # minimum of 1 code
    end

    def username(options)
      user = options.username
      user ||= ENV["CODES_USERNAME"]
      user ||= CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)

      
      CredentialsManager::PasswordManager.shared_manager(user) if user

      user
    end

    def bundle_id(options, apple_id)
      app_identifier = options.app_identifier
      app_identifier ||= ENV["CODES_APP_IDENTIFIER"]
      app_identifier ||= CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
      app_identifier ||= (FastlaneCore::ItunesSearchApi.fetch(apple_id)['bundleId'] rescue nil) if apple_id
      app_identifier ||= ask("App Identifier (Bundle ID, e.g. com.krausefx.app): ")
      app_identifier
    end

    def apple_id(options)
      apple_id = options.apple_id
      apple_id ||= ENV["CODES_APP_ID"]
    end

    run!
  end
end

CodesApplication.new.run
